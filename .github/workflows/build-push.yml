name: Build and Push GraalVM minecraft Images

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant:
          - dockerfile: "Dockerfile24"
            tag: "24"
            service: "graalvm-runtime-24"
            latest: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build with docker compose
        run: |
          echo "🔨 Building service: ${{ matrix.variant.service }}"
          docker compose build ${{ matrix.variant.service }}

      - name: Determine and validate image name
        run: |
          echo "🔍 Determining image name..."
          
          # Method 1: Extract from docker-compose.yml directly
          base_image_name=$(awk '/^[[:space:]]*'${{ matrix.variant.service }}':/{flag=1; next} flag && /^[[:space:]]*image:/{print $2; exit}' docker-compose.yml)
          echo "Method 1 (from compose): '$base_image_name'"
          
          # Handle different tag formats
          if [ -n "$base_image_name" ]; then
            # Check if image has explicit tag
            if [[ "$base_image_name" == *":"* ]]; then
              image_name="$base_image_name"
            else
              # Try both with and without :latest tag
              if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^${base_image_name}:latest$"; then
                image_name="${base_image_name}:latest"
              elif docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^${base_image_name}$"; then
                image_name="$base_image_name"
              fi
            fi
            echo "Resolved image name: '$image_name'"
          fi
          
          # Method 2: Fallback - find built image by pattern
          if [ -z "$image_name" ]; then
            image_name=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(graalvm|enhanced)" | head -1)
            echo "Method 2 (by pattern): '$image_name'"
          fi
          
          # Method 3: Direct repository search
          if [ -z "$image_name" ]; then
            # Look for images with repository name containing expected pattern
            repo_name=$(docker images --format "{{.Repository}}" | grep -E "(graalvm|enhanced)" | head -1)
            if [ -n "$repo_name" ]; then
              tag_name=$(docker images --format "{{.Repository}} {{.Tag}}" | grep "^${repo_name} " | head -1 | awk '{print $2}')
              image_name="${repo_name}:${tag_name}"
              echo "Method 3 (repo search): '$image_name'"
            fi
          fi
          
          # Method 4: Hardcoded fallback based on service name
          if [ -z "$image_name" ]; then
            case "${{ matrix.variant.service }}" in
              "graalvm-runtime-24")
                # Try both variants
                if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^graalvm-minecraft-24:latest$"; then
                  image_name="graalvm-minecraft-24:latest"
                elif docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^graalvm-enhanced-24:latest$"; then
                  image_name="graalvm-enhanced-24:latest"
                else
                  image_name="graalvm-enhanced-24"
                fi
                ;;
              *)
                image_name="graalvm-enhanced-${{ matrix.variant.tag }}"
                ;;
            esac
            echo "Method 4 (hardcoded): '$image_name'"
          fi
          
          # Debug: Show all available images
          echo "🔍 All available images:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          
          # Final validation
          if [ -z "$image_name" ]; then
            echo "❌ Could not determine image name!"
            exit 1
          fi
          
          # Verify image exists (handle both formats)
          if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^${image_name}$"; then
            echo "✅ Found image: $image_name"
          else
            # Try without explicit tag if it has one
            if [[ "$image_name" == *":"* ]]; then
              base_name=$(echo "$image_name" | cut -d':' -f1)
              if docker images --format "{{.Repository}}" | grep -q "^${base_name}$"; then
                echo "✅ Found repository: $base_name (will use with default tag)"
                image_name="$base_name"
              else
                echo "❌ Image $image_name does not exist!"
                exit 1
              fi
            else
              echo "❌ Image $image_name does not exist!"
              exit 1
            fi
          fi
          
          echo "✅ Final image name: $image_name"
          echo "IMAGE_NAME=$image_name" >> $GITHUB_ENV

      - name: Tag and push to Docker Hub
        run: |
          echo "🏷️ Tagging and pushing: $IMAGE_NAME"
          
          # Tag for Docker Hub with version
          docker tag "$IMAGE_NAME" "rafalohaki/graalvm-minecraft:${{ matrix.variant.tag }}"
          echo "✅ Tagged as: rafalohaki/graalvm-minecraft:${{ matrix.variant.tag }}"
          
          # Push version tag
          docker push "rafalohaki/graalvm-minecraft:${{ matrix.variant.tag }}"
          echo "✅ Pushed: rafalohaki/graalvm-minecraft:${{ matrix.variant.tag }}"
          
          # Tag and push as latest if specified
          if [ "${{ matrix.variant.latest }}" = "true" ]; then
            docker tag "$IMAGE_NAME" "rafalohaki/graalvm-minecraft:latest"
            docker push "rafalohaki/graalvm-minecraft:latest"
            echo "✅ Tagged and pushed as latest"
          fi

      - name: Test pushed image
        run: |
          echo "🧪 Testing pushed image..."
          docker run --rm rafalohaki/graalvm-minecraft:${{ matrix.variant.tag }} java -version
          echo "✅ Image test successful!"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up local images..."
          docker system prune -f
